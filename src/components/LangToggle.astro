---
import Icon from './Icon.astro';
---

<language-toggle>
	<button>
		<span class="sr-only">Switch Language</span>
	</button>
</language-toggle>

  
  

<style>
	
	button {
		display: flex;
		border: 0;
		border-radius: 6px;
		padding: 5px;
		background-color: var(--accent-text-over);
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		cursor: pointer;
	}

	:global(.theme-dark) button {
		display: flex;
		border: 0;
		border-radius: 6px;
		padding: 5px;
		background-color: var(--accent-regular);
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		cursor: pointer;
	}

	:global(.theme-dark) button:hover {
		background-color: #ffffff;
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		color: var(--accent-regular);
	}

	button:hover {
		background-color: var(--accent-regular);
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		color: var(--accent-text-over);
	}


	.icon {
		z-index: 1;
		position: relative;
		display: flex;
		padding: 0.5rem;
		width: 2rem;
		height: 2rem;
		font-size: 1rem;
		color: var(--accent-overlay);
	}

	.icon.light::before {
		content: '';
		z-index: -1;
		position: absolute;
		inset: 0;
		background-color: var(--accent-regular);
		border-radius: 999rem;
	}

	:global(.theme-dark) .icon.light::before {
		transform: translateX(100%);
	}

	:global(.theme-dark) .icon.dark,
	:global(html:not(.theme-dark)) .icon.light,
	button[aria-pressed='false'] .icon.light {
		color: var(--accent-text-over);
	}

	@media (prefers-reduced-motion: no-preference) {
		.icon,
		.icon.light::before {
			transition:
				transform var(--theme-transition),
				color var(--theme-transition);
		}
	}

	@media (forced-colors: active) {
		.icon.light::before {
			background-color: SelectedItem;
		}
	}
</style>

<script>
class LanguageToggle extends HTMLElement {
	constructor() {
		super();

		const button = this.querySelector('button');
		const currentLang = this.getCurrentLanguage();

		/** Set the language */
		const setLanguage = (lang) => {
			const baseUrl = window.location.origin;
			let path = window.location.pathname;

			// Adjust both language prefix and section path on a single click
			if (lang === 'es') {
				// If English and in "work" section, switch to "proyectos" with "/es" prefix
				if (path.includes('/work')) {
					path = `/es${path.replace('/work', '/proyectos')}`;
				} else if (!path.startsWith('/es')) {
					// Add '/es' prefix if it's a non-work English path
					path = `/es${path}`;
				}
			} else {
				// If Spanish and in "proyectos" section, switch to "work" and remove "/es" prefix
				if (path.includes('/proyectos')) {
					path = path.replace('/es/proyectos', '/work');
				} else if (path.startsWith('/es')) {
					// Remove '/es' prefix for other Spanish paths
					path = path.replace(/^\/es/, '');
				}
			}

			window.location.href = `${baseUrl}${path}`;
		};

		// Set initial button state
		button.textContent = currentLang === 'es' ? 'English' : 'EspaÃ±ol';

		// Toggle language when the button is clicked
		button.addEventListener('click', () => {
			const newLang = currentLang === 'es' ? 'en' : 'es';
			setLanguage(newLang);
		});
	}

	getCurrentLanguage() {
		return window.location.pathname.startsWith('/es') ? 'es' : 'en';
	}
}

customElements.define('language-toggle', LanguageToggle);






</script>
